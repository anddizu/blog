---
import { type CollectionEntry, getCollection } from "astro:content";
import BaseLayout from "../../layouts/base-layout.astro";
import Button from "../../components/button.astro";
import FormattedDate from "../../components/formatted-date.astro";
import PostPreview from "../../components/post-preview.astro";
import { slugify } from "../../utils/common-utils";

export async function getStaticPaths() {
  const posts = (await getCollection("blog")).sort(
    (a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
  );
  const postCount = posts.length;
  return posts.map((post, index) => ({
    params: { slug: post.slug },
    props: {
      post,
      prevPost: index + 1 !== postCount ? posts[index + 1] : null,
      nextPost: index !== 0 ? posts[index - 1] : null,
    },
  }));
}

type Props = {
  post: CollectionEntry<"blog">;
  prevPost: CollectionEntry<"blog">;
  nextPost: CollectionEntry<"blog">;
};

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, pubDate, updatedDate, description, seo, tags } = post.data;
const { Content } = await post.render();
---

<BaseLayout
  title={seo?.title ?? title}
  description={seo?.description ?? description}
  image={seo?.image}
  pageType="article"
  showHeader={false}
>
  <article class="mb-16 sm:mb-24">
    <header class="mb-8">
      <h1
        class="text-3xl leading-tight font-sans font-medium sm:text-xl sm:leading-tight"
      >
        {title}
      </h1>
      <div class="mt-4 text-sm">
        <FormattedDate date={pubDate} />
        {
          updatedDate && (
            <>
              <span>
                (Updated on <FormattedDate date={updatedDate} />)
              </span>
            </>
          )
        }
      </div>
    </header>
    <div class="max-w-none prose prose-dante sm:prose-lg">
      <Content />
    </div>
    <div
      class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base"
    >
      {
        tags.length > 0 && (
          <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
            {tags.map((tag) => (
              <a
                class="text-main hover:underline"
                href={`/tags/${slugify(tag)}`}
              >
                #{tag}
              </a>
            ))}
          </div>
        )
      }
      <Button
        class="copy-url-button"
        aria-label="分享"
        data-url={href}
        data-tooltip-default="分享"
        data-tooltip-success="已复制链接">分享</Button
      >
    </div>
  </article>
  {
    (prevPost || nextPost) && (
      <div class="my-16 sm:my-24">
        <h2 class="mb-12 text-xl font-sans sm:mb-16 sm:text-2xl">下一页</h2>
        {nextPost && (
          <PostPreview
            post={nextPost}
            class="mb-10 sm:mb-12"
            headingLevel="h3"
          />
        )}
        {prevPost && (
          <PostPreview
            post={prevPost}
            class="mb-10 sm:mb-12"
            headingLevel="h3"
          />
        )}
      </div>
    )
  }
</BaseLayout>

<script>
  document.addEventListener("astro:page-load", () => {
    const copyUrlButton = document.querySelector(
      ".copy-url-button"
    ) as HTMLButtonElement;
    copyUrlButton?.addEventListener("click", async () => {
      await copyUrl(copyUrlButton);
    });

    async function copyUrl(button: HTMLButtonElement) {
      let url = button.getAttribute("data-url") || "";
      let label = button.innerText;

      await navigator.clipboard.writeText(url);

      button.innerText = "已复制链接";

      setTimeout(() => {
        button.innerText = label;
      }, 2500);
    }
  });
</script>
